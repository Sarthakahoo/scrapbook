-----------------------------------------------------------------

# adding own pluralizations 


    ActiveSupport::Inflector.inflections do |inflect|
      inflect.plural /ox$/i, '\1en'
      inflect.singular /ox$en/i, '\1'
    end

    ActiveSupport::Inflector.inflections.plurals
    ActiveSupport::Inflector.inflections.uncountable

usage 

    = pluralize @recipes.size 'unread recipe


from: Rails recipe book
Rails 3.2.12

----------------------------------------------------------------------------------

# Rails path 

    Rails.root.join(*%w[spec fixtures files uploads])  + 'a'
    => #<Pathname:/Users/tomi/git/memo/spec/fixtures/files/uploads/a> 

date: 2013-03-13
keys: rails root path route to file 
rails: 3.2.12

# custom Logger 

    NotificationLogger = Logger.new( File.open("#{Rails.root.to_s}/log/#{Rails.env}_notifications.log", 'a') )
    NotificationLogger.info 'Hello World!'

you can add the first line to e.g.: `config/application.rb` and call the second line anywhere 

date: 2013-03-12
rails: 3.2.12
keys:  custom logger logging rails log


# Rails arel 

https://github.com/rails/arel

**to do not equal where statement**

    DocumentVersion.where( DocumentVersion.arel_table[:id].not_eq(self.id) )

**lover than**

    Event.arel_table[:start_at].lt(Time.now).to_sql
     => "`events`.`start_at` < '2013-03-05 10:38:22'" 


** multiple or **

    scope :with_owner_ids_or_global, lambda{ |owner_class, *ids|
      with_ids = where(owner_id: ids.flatten).where_values.reduce(:and)
      with_glob = where(owner_id: nil).where_values.reduce(:and)
      where(owner_type: owner_class.model_name).where(with_ids.or( with_glob ))
    }


** multiple or with bracket separation **

    # app/model/candy.rb
    class Candy < ActiveRecord::Base
      has_many :candy_ownerships
      has_many :clients, through: :candy_ownerships, source: :owner, source_type: 'Client'
      has_many :users,   through: :candy_ownerships, source: :owner, source_type: 'User'

      # ....
      scope :for_user_or_global, ->(user) do
        worldwide_candies  = where(type: 'WorldwideCandies').where_values.reduce(:and)
        client_candies     = where(type: 'ClientCandies', candy_ownerships: { owner_id: user.client.id, owner_type: 'Client'}).where_values.reduce(:and)
        user_candies       = where(type: 'UserCandies',   candy_ownerships: { owner_id: user.id,        owner_type: 'User'  }).where_values.reduce(:and)

        joins(:candy_ownerships).where( worldwide_candies.or( arel_table.grouping(client_candies) ).or( arel_table.grouping(user_candies) ) )
      end

      # ....
    end

    Candy.for_user_or_global(User.last)
    #=> SELECT `candies`.* FROM `candies` INNER JOIN `candy_ownerships` ON `candy_ownerships`.`candy_id` = `candies`.`id` WHERE (`candies`.`deleted_at` IS NULL) AND (((`candies`.`type` = 'WorldwideCandies' OR (`candies`.`type` = 'ClientCandies' AND `candy_ownerships`.`owner_id` = 19 AND `candy_ownerships`.`owner_type` = 'Client')) OR (`candies`.`type` = 'UserCandies' AND `candy_ownerships`.`owner_id` = 121 AND `candy_ownerships`.`owner_type` = 'User')))



### Select Clients that have more that have existing registries

   class Client < ActiveRecord::Base
     has_many :registries

     scope :with_existing_registries, ->{ Client.joins(:registries).where(Registry.arel_table[:client_id].eq( Client.arel_table[:id]) ).uniq }
  end
  class Registry < ActiveRecord::Base
    belongs_to :client
  end
  
so 
    
    registry = Registry.create
    client_without = Client.create
    client_with_reg = Client.create( registries: [registry]
    Client.with_existing_registries
    # => [client_with_reg]


http://stackoverflow.com/a/16014142/473040
https://github.com/rails/arel/tree/master/lib/arel/nodes

---------------------------------------------------------------------------

# get all classes that are inheriting from  this class

    #a/m/document_notification.rb
    class DocumentNotification < Notification
    end

    #a/m/notification.rb
    class Notification < ActiveRecord::Base
    end

    # console
    Notification.send :subclasses
    #=> [DocumentNotification, SomeOtherNotification]
    
    DocumentNotification.superclass
    #=> [Notification]

    Notification.superclass
    #=> [DocumentNotification]
    # => ActiveRecord::Base 


date: 2013-02-25
keys: sti list of classes, 
rails 3.2.12


---------------------------------------------------------------------

#Rails whole url in rails mailer view

to get the full url (with host) in mail view you need to use 

    # a/v/some_mailer/foo.html.haml
    = link_to 'some', document_url(@document)

not just 

    # a/v/some_mailer/foo.html.haml
    = link_to 'some', @document

to have the correct configuration of path:

     # c/e/development.rb
     #...
      # Mail url
      config.action_mailer.default_url_options = { 
        :host => 'localhost',
        :port => 3000
      }

resources: [so1](http://stackoverflow.com/questions/2257365/rails-generate-a-full-url-in-an-actionmailer-view)
date: 2013-02-28
keys: mailer full url absolute mail view
rails:  3.2.12



#Rails mail interceptor 

stop sending mails in development

    #  lib/development_mail_interceptor.rb
    class DevelopmentMailInterceptor
      def self.delivering_email(message)
        email = LOCAL_CONFIG.try(:[], 'email')

        if email.blank?
          message.delivery_method :test
          Rails.logger.warn "No Email address was specified in the app_config.yml"
        end

        message.to = email
        message.cc = nil
        message.bcc = nil
        development_information = "[ TO: #{message.to} ]"
        development_information << " [ CC: #{message.cc} ]" if message.cc
        development_information << " [ BCC: #{message.bcc} ]" if message.bcc

        message.subject = "[Test] #{message.subject} #{development_information}"
      end
    end


    #config/initializers/setup_mail.rb
    ActionMailer::Base.smtp_settings = {
      :address              => "smtp.something.com",
      :openssl_verify_mode  => 'none'
    }

    ActionMailer::Base.register_interceptor(DevelopmentMailInterceptor) if Rails.env.development?


---------------------------------------------------------------------
# scopes

    class Document
      scope :with_latest_super_owner, lambda{ |o|
        raise "must be client or user instance" unless [User, Client].include?(o.class)
        joins(:document_versions, document_creator: :document_creator_ownerships).
        where(document_creator_ownerships: {owner_type: o.class.model_name, owner_id: o.id}).
        where(document_versions: {latest: true}).group('documents.id')
      }
      #they can get kinda complex :)
    end



## join scopes 

    class Document
      scope :active,     lambda{ joins(:notifications).merge(Notification.active) }
    end


date: 2013-02-22

---------------------------------------------------------------------

#disable STI 

~~~ruby
class Document < ActiveRecord::Base
  self.inheritance_column = :_type_disabled #disable STI
end
~~~

date: 2013-02-22
key : disable dissable sti single table inheritance

---------------------------------------------------------------------

# load YAML file config  only for development

config 

    # config/local_config.rb
    if Rails.env.development?
      begin
        LOCAL_CONFIG = YAML.load_file("#{Rails.root}/config/local_config.yml")[Rails.env] || {}
      rescue
        Rails.logger.warn "No config/local_config.yml not found"
        LOCAL_CONFIG = {}
      end
    end

yml file

    # config/initializers/local_config.yml
    development:
      email: 'equivalent@eq8.eu'


in model

    LOCAL_CONFIG.try(:[], 'email')


date: 2013-02-22
keys: enviroment, yaml configuration, 

---------------------------------------------------------------------
