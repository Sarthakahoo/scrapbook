









# rspec and haml helpers


today I was creating helper to handle bootstrap table:

~~~ruby
# a/h/table_helper.rb
#
module TableHelper
  def table
    capture_haml do
      haml_tag :table, :class=>['table', 'table.table-striped', 'table-bordered', 'table-condensed'] do
        yield
      end
    end
  end
end
~~~

no extra magic, but when I wanted to create rspec on it I keep on getting 

    undefined method `capture_haml' for #<#<Class:0x0000000364cf28>:0x00000003e32e40>

now I found few really descriptive solutions on this close to my problem that should work like 
http://2rg.tumblr.com/ (find "Including Haml Helpers in an RSpec spec" on site)

ruby~~~
# spec/spec_helper.rb
require 'rubygems'
require 'spork'

Spork.prefork do
  RSpec.configure do |config|
    #...

    #Helpers
    config.include Haml::Helpers , :type => :helper
    config.include ActionView::Helpers, :type => :helper
    config.before :each, :type => :helper do
      init_haml_helpers
    end

    #...
  end
end
~~~

(my colleague is using above one in similar project, from not too far ago and it's working)


from http://blog.wolfman.com/articles/2007/7/14/using-rspec-to-test-haml-helpers  :

~~~ruby
describe ApplicationHelper do
 
  before :each do
    helper.extend Haml
    helper.extend Haml::Helpers
    helper.send :init_haml_helpers
  end
  
  it do
    helper.table do 
     #...
    end
  end
end
~~~

but in this one I keep on getting 

     undefined local variable or method `init_haml_helpers'



short story short

~~~ruby
# spec/spec_helper.rb
require 'rubygems'
require 'spork'

Spork.prefork do
  RSpec.configure do |config|
    #...

    #Helpers
    config.include Haml::Helpers , :type => :helper

    #...
  end
end


# spec/helper/table_helper.rb
describe TableHelper do
 
  before :each do
    helper.extend Haml::Helpers
    init_haml_helpers
  end
  
  it do
    helper.table do 
     #...
    end
  end
end
~~~


...and this one  actually work for me.

I'm running ruby-1.9.3-p194 rspec-2.10.0 rails-3.2.6


























#@todo Rails flash partial trouble 

Today I found my colleague for dispalying flash messages: 

~~~ruby
- flash.each do |name, msg|
  %div{:class => "alert alert-#{name == :notice ? "success" : "error"}"}
    %a.close{"data-dismiss" => "alert"} ×
    = content_tag :div, msg, :id => "flash_#{name}" if msg.is_a?(String)
~~~

pretty simple, but we were using this same code in two layouts. So lets remove duplicity and move it to partial.

*app/views/layouts/application.html.haml*

~~~ruby
!!!
%html
  %head
  %body
    = render 'layouts/flash'
~~~

*app/views/layouts/admin.html.haml*

~~~ruby
!!!
%html
  %head
  %body
    = render 'layouts/flash'
~~~

*app/views/layouts/_flash.html.haml*

~~~ruby
- flash.each do |name, msg|
  %div{:class => "alert alert-#{name == :notice ? "success" : "error"}"}
    %a.close{"data-dismiss" => "alert"} ×
    = content_tag :div, msg, :id => "flash_#{name}" if msg.is_a?(String)
~~~

Everything looks nice and should work, but when we test it will get:

    ActionView::Template::Error (undefined method `each' for nil:NilClass)

hmm...

so maybe the locale variable is incorrectly passed, lets try this


~~~ruby
= render 'layouts/flash', :locales => {:flash => flash}
~~~

same error!

    ActionView::Template::Error (undefined method `each' for nil:NilClass)

After googling for a while I found this same problem on Stack Overflow: 
http://stackoverflow.com/questions/8023396/rails-3-notice-and-error-flash-cannot-be-rendered-in-a-partial

The thing is that rails partial is initializing variable named *flash* and overwriting our *flash* *flash*. So the solution is simple, don't name the partial "flash" 

so change layouts to  

*app/views/layouts/application.html.haml*

~~~ruby
#...
    = render 'layouts/notice'
~~~

*app/views/layouts/admin.html.haml*

~~~ruby
#...
    = render 'layouts/notice'
~~~

and rename *_flash* partial to *_notice* partial

    mv app/views/layouts/_flash.html.haml app/views/layouts/_notice.html.haml













## PostgreSQL host problem in Linux Mint 13



 Working on one project using PostgreSQL and  evrything configured correctly, I kept on getting 

      rake db:migrate

      rake aborted!
      FATAL:  Peer authentication failed for user "postgres"


the reason was that defaultly instaled PostgeSQL on Mint 13 requirest to specify host. 
So quicksolution in my *database.yml* :


    development:
      adapter: postgresql
      encoding: unicode
      database: project_development
      pool: 5
      username: postgres
      password: secret
      host: localhost   #<<< solution 










##"fuzzystrmatch" module missing in Ubuntu and Mint 13

Working on one PostgreSQL porject I had an issue running *rake db:migrate* 

    PG::Error: ERROR:  could not open extension control file "/usr/share/postgresql/9.1/extension/fuzzystrmatch.control": No such file or directory
    : create extension fuzzystrmatch

solution 

    sudo apt-get install postgresql-contrib 

than another error ocured:

    PG::Error: ERROR:  permission denied to create extension "fuzzystrmatch"
    HINT:  Must be superuser to create this extension.
    : create extension fuzzystrmatch

now this has nothing to do with "sudo" user so running *sudo rake db:migrate* won't help. The reason for this was that the fuzzystrmatch module for postgress requires database super user.

for me the solution was to just change the *database.yml* file to use deffault *postgres* super user

      development:
        adapter: postgresql
        encoding: unicode
        database: project_development
        username: postgres
        password: extrasafe
        host: localhost

but better solution will be ether in postgres config files garant usage of fuzzystrmatch module to regular users.













## rails hash that treets equally sybols and strings


     x = HashWithIndifferentAccess.new

example how to convert your regular hash to this kind of hash 

    ruby-1.9.2-p290 :060 > old_hash = { :nyu => "Elfen lied" } 
     => {:nyu=>"Elfen lied"} 
    ruby-1.9.2-p290 :061 > old_hash['nyu']
     => nil 
    ruby-1.9.2-p290 :062 > old_hash[:nyu]
     => "Elfen lied" 
     
     x = HashWithIndifferentAccess.new old_hash
     => {"nyu"=>"Elfen lied"} 
    ruby-1.9.2-p290 :066 > x[:nyu]
     => "Elfen lied" 
    ruby-1.9.2-p290 :067 > x['nyu']
     => "Elfen lied" 


ActionController parms are also this kind of hash :) 


some other examples can be found http://rubyquicktips.com/post/603292403/accessing-a-hash-with-either-string-or-symbol-keys, http://as.rubyonrails.org/classes/HashWithIndifferentAccess.html

##debugging airbrake errors

### copy params from airbrake to console variable

         prms = {"smtp-id"=>"<4f89914da0612_6d055bf298305d>",
         "timestamp"=>"1334415695",
         "token"=>
          "dsgj4gu89h24587gh123458gh08",
         "action"=>"create",
         "event"=>"dropped",
         "reason"=>"Unsubscribed Address",
         "controller"=>"sendgrid_events",
         "email"=>"bubla@mailinator.com"}

### run console

      app.post 'sendgrid_events', prms

this represents post to /sendgrid_events (action create) with params that coused failture 


## force ssl in rails 


### on controller level 

in *app/controller/your_controller.rb*

     class LostPasswordsController < ApplicationController
  
       force_ssl
       # or...    force_ssl if Rails.env.production?
       

       def index
         #....
       end
     end 

if globally use it in application controller 

http://apidock.com/rails/ActionController/ForceSSL/ClassMethods/force_ssl


### on route level 

In *config/routes.rb*

        MyApplication::Application.routes.draw do
          resources :sessions, :constraints => { :protocol => "https" }
        end


or for several of them 

        MyApplication::Application.routes.draw do
          scope :constraints => { :protocol => "https" } do 
            # All your SSL routes.
          end
        end


+ your links 

         <%= link_to "Logout", sessions_url(:protocol => 'https'), :method => :delete %>

[source for this solution](http://stackoverflow.com/a/3635419) also check http://www.themomorohoax.com/2010/10/08/using-ssl-in-rails-3


## on whole app level

rails 3.1

        # config/application.rb
        module MyApp
          class Application < Rails::Application
            config.force_ssl = false
          end
        end

        # config/environments/production.rb
        MyApp::Application.configure do
          config.force_ssl = true
        end

[stolen from](http://www.simonecarletti.com/blog/2011/05/configuring-rails-3-https-ssl/) :) 






## Bcrypt iplementation to Rails app

http://bcrypt-ruby.rubyforge.org/classes/BCrypt/Password.html

I was trying to iplement BCrypt encryption on one of tables and test that with rspec.


### way it should be done and works



~~~ruby
    it "should encrypt password before creation creation" do
      account = Bubla.new
      account.password = 'lorem' 

      account.save
      account.reload

      BCrypt::Password.new(account.password).should == 'lorem'
    end
~~~

~~~ruby
class Bubla < ActiveRecord::Base

# database table has column called password

  after_save :encrypt_password

  private
  def encrypt_password
    begin
      BCrypt::Password.new self.password  #will raise if non BCrypt string
    rescue BCrypt::Errors::InvalidHash
      self.update_attribute(:password, BCrypt::Password.create(self.password))
    end
  end

end
~~~




On [BCrypt site](http://bcrypt-ruby.rubyforge.org/classes/BCrypt/Password.html) there was really straingt forward example how to do that. Of course I did it different way that didn't work. My logic was to encrypt password before it's saved to database.


### way that will fail

~~~ruby
class Bubla < ActiveRecord::Base

  before_save :encrypt_password

  private
  def encrypt_password
    self.password =  BCrypt::Password.create(password)
  end

end
~~~

for some reason, in this scenarion rspec fails with 

       Failure/Error: BCrypt::Password.new(account.password).should == 'lorem'
       expected: "lorem"
            got: "$2a$10$HOaDPmirWXqeAzHGzGFm.u0P.GUcnLabnVZGcvXCSV6MPH8w5rzu6" (using ==)






another note: my colleague give me this link http://bcrypt-ruby.rubyforge.org/   ...there is another alternative how to do some parts, didn't get to it yet but you can check











## assets pipeline manifest files 


In smaller app it's good practice to have only one asset pipeline manifest file => *app/assets/stylesheet/application.css* , but in larger sites you might find out you need mero.

All you need is exact content as you have in *a/assetss/stylesheets/application.css* and copy it to your new one 

for example 

*app/assets/stylesheets/plain.css*

    *= require_self
    *= require other_file

Now you can link to it in your views.

*a/v/l/plain.html.haml*

    = stylesheet_link_tag "plain"


Because assets needs to be precompiled when running app, you need to add your new manifest file to list of environment manifest files 

*config/environment/production.rb*

     config.assets.precompile += %w( plain.css )
  

...else you get error like *plain.css isn't precompiled*  even if you run *rake assets:precompile*, once again do this even if you are precompiling assets locally 
Do this on all environments that are running on remote servers (staging f.e.)







## Checking user agent


In one of tasks given to me I had to check if the website is wisited by iOS native browser (not Safari, the browser that is lunched when you open website inside iOS application) and hide navigation bar. The reasoning was that from UX perspective, user is viewing the site from inside the application, so he shouldn't be able to go to home page. (f.e. if he is viewing terms and conditions) 

The reqirement was also that when viewing the website in iOS Safari, the navigation should be present. Because of this I couldn't use media queries nad just hide content if the device viewing the site has resolution les that 400px for example

The only solution left was detect user agent. 

so in my *app/assets/javascripts/detect_agent.js.coffee*

    if (navigator.userAgent.match(/CustomAgent/) != null)
      $('html').addClass('ios_app')   


and css sass file 

    html.ios_app
      .web_only
        display: none


but there was on issue that content loaded in native browser was "jumping", so we decided to fix it on server level 


in *a/c/application_controller.rb*

      def custom_user_agent?
        request.env["HTTP_USER_AGENT"] && request.env["HTTP_USER_AGENT"][/(CustomAgent)/]
      end
      helper_method :custom_user_agent?


in *a/v/layout/application.html.haml*

      %html{ :class=>"#{ 'lt_ios_app' if custom_user_agent? }"}



Note: the *CustomAgent* is custom agent variable that iOS application was overwriting in this app. By deffault the native iOS browser user agent is similar to Safari web browser user agent so is hard to detect it for 100% sure. So there is a way how to change the user agent in iOS   

solution from http://stackoverflow.com/questions/8487581/uiwebview-ios5-changing-user-agent , in iOS:

    NSDictionary *dictionnary = [NSDictionary dictionaryWithObjectsAndKeys:@"Your user agent", @"UserAgent", nil];
    [[NSUserDefaults standardUserDefaults] registerDefaults:dictionnary];  


## Facebook posts to wall without image
 
There are solutions to enforce facebook to display image once posted to fb wall http://stackoverflow.com/questions/1079599/facebook-post-link-image (just set the open graph meta tag image)
But what if you don't want facebook image? The thing is that facebook is trying to be clever and pull an  image for you from your web site.

the solution to do this is set the open graph image pointing to url of your website (don't point it to image, just website )

    <meta content='http://example.eu/' property='og:image'>   


Hovever, to make open graph meta tags working, you got to be sure that all required opet fcapd metatags are set correctly 

*  og:title - The title of the entity.
*  og:type - The type of entity. You must select a type from the list of Open Graph types.
*  og:image - The URL to an image that represents the entity. Images must be at least 50 pixels by 50 pixels. Square images work best, but you are allowed to use images up to three times as wide as they are tall.
*  og:url - The canonical, permanent URL of the page representing the entity. When you use Open Graph tags, the Like button posts a link to the og:url instead of the URL in the Like button code.
*  og:site_name - A human-readable name for your site, e.g., "IMDb".
*  fb:admins or fb:app_id - A comma-separated list of either the Facebook IDs of page administrators or a Facebook Platform application ID. At a minimum, include only your own Facebook ID.


exapmle meta tag data

    <meta content='' property='og:description'>
    <meta content='' property='og:image'>   
    <meta content='MyTest app' property='og:site_name'>
    <meta content='http://example.eu' property='og:url'>
    <meta content='website' property='og:type'>
    <meta content='10000123456789' property='fb:admins'>
    <meta content='Movies and music' property='og:title'>


The *og:image* tag cannot be blank or the [facebook linter page](https://developers.facebook.com/tools/debug) will complain 

    Object at URL 'http://example.eu/' of type 'website' is invalid because the given value '' for property 'og:image:url' could not be parsed as type 'url'.

to be honest when it comes to this particular problem, image wasn't displayed even if the image tag was blank, but it's not good practice.


[my question on SO](http://stackoverflow.com/questions/9704642/enforce-no-facebook-image-preview-when-posting-sharing-to-wall/9704725#9704725)


## way to create custom time in future (or past( exact date 

Datetime with exact year

~~~ruby
DateTime.civil(5000)
#Wed, 01 Jan 5000 00:00:00 +0000 
~~~


~~~ruby
datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24)) 
#Sat, 01 Jan 2000 00:00:00 -0600 
~~~

http://api.rubyonrails.org/classes/DateTime.html





in *config/enviroments/your_environment.rb* do

    YourApp::Application.config.web_hostname = 'bubla.mysite.com'

or better 

    YourApp::Application.configure do
      config.web_hostname = 'bubla.mysite.com'
    end
 

than access it in moddels 
   
    Rails.application.config.web_hostname 

Why ? 

it's much cleaner than seting constant in enviromests files

 *config/enviroments/your_environment.rb* 

      ENVIRONMENT_HOST_NAME= 'budla.mysite.com'   # it works but it's not pretty at all 




## How to access routing helper inside model

in model
~~~ruby

def some_methode
  Rails.application.routes.url_helpers.user_url( favorit_user.guid, :host => 'eq8.eu' ) 
end
~~~

will give me full path like *http://eq8.eu/user/atsusos23s*



idea from http://stackoverflow.com/questions/5380703/rails-get-resource-path-in-model
