



------------------------------------------------









# How to run cucumber spork

    spork
    cucumber --drb

and you getting 

    WARNING: No DRb server is running. Running features locally:

you need to run in separate window ...

    spork cucumber

Apparently *spork* command is just for *RSpec*s [source](https://github.com/cucumber/cucumber/issues/250#issuecomment-5141978)


--------------------------------------------------2012-11-05












# Erase/clear gems in RVM gemset

If you manage to screw up your RVM gemset (which is not hard to do) you can erase them with command

     rvm gemset empty


-----------------------------------------------------2012-11-01












# List of gems, gem version

if you are using bundler 

    bundle list | grep spork




--------------------------------------------------------------2012-10-01





# How to findo out if value in JavaScript array

    a = ['foo', 'bar', 'jar']
    a.indexOf('sushi') # => -1
    a.indexOf('bar') # => 1

    a.indexOf(something) > -1

however!! , IE doesn't have a full support... so you need to either define function yourself or if you are using jQuery, use its

    $.inArray(value, array)


[source](http://stackoverflow.com/questions/1181575/javascript-determine-whether-an-array-contains-a-value)



-------------------------------------------------2012-10-01









# how to set default value to instance method in Rails

~~~ruby
after_initialize :set_foo_def_value

def set_foo_def_value
  @foo ||= []
end
~~~

[source](http://stackoverflow.com/questions/328525/what-is-the-best-way-to-set-default-values-in-activerecord)


--------------------------------------2012-10-01
















# How to get values of enabled checked checkboxes with jQuery

    $('input:checked:not(:disabled)').serializeArray().map(function(x){return x.value})


----------------------------------------------------




# JavaScript way to do Ruby's  collect (map)

let say I have JavaScript Array of Objects:

    [Object { name= "document[client_ids][]",  value="2"}, Object { name="document[client_ids][]",  value="3"}]

I want to collect values. In Ruby I would just do...

   [obj, obj].collect{|x| x.value}

in JavaScript I must do 

    [obj, obj].map(function(x){return x.value})  => ["2", "3"]





----------------------------------------------------



# Validate presence of boolean field

if you got boolean field e.g.: *approved* and you want to require it's presence...

    validates_presence_of :approved

...will cause an issue when value is *false* (*nil* and *false* are valuated as not present) 

solution:

    validates :approved, :inclusion => {:in => [true, false]}








----------------------------------------------------




# constantize and clasify


    "Document".constantize # => Document(id: integer ...) 
    "document".classify    # => "Document"



----------------------------------------------------











# execute SQL inside migrations

You can execute direct SQL in migrations with *execute* method

~~~ruby
Class DoSomethingMigration < ActiveRecord::Migration
  def up 
    execute "Update categories set ......"
  end
#...
~~~









----------------------------------------------------








# Rails pluck


Fetch only one column SQL query 

    Option.select("DISTINCT type").pluck(:type)
    #  =>   SELECT type FROM `options


Fetch only one column with unique values SQL query 

    Option.select("DISTINCT type").pluck(:type)
    # =>   SELECT DISTINCT type, type FROM `options`












---------------------------------------------------


# Time.now in current zone

    Time.now
    # => 2012-08-15 11:07:17 +0100  # this is time in written in datbase
    Time.zone.now
    # => Wed, 15 Aug 2012 10:05:55 UTC +00:00  # this is time related to local timezone







----------------------------------------------------


#disable STI

"type" is reserved database word for Single table inheritance type in rails. 
If you want to disable that in one model do:

~~~ruby
class MyModel < ActiveRecord::Base
  #disable STI
  self.inheritance_column = :_type_disabled
end
~~~











----------------------------------------------------







# httpasswd like authentication in rails

class UserController < ApplicationController
   http_basic_authenticate_with :name => "dhh", :password => "secret", :except => :index

end

http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Basic.html

keywords: authencication, httpasswd htpasswrd httpwd httpaccess password login









----------------------------------------------------







# url_for tricks 

~~~ruby
  class UsersController < ApplicationController
  def index 
    url_for( :controller => 'users', :action => 'new')
    # http://0.0.0.0:3000/users/new
    url_for( :controller => 'users')
    # http://0.0.0.0:3000/users
  end
end
~~~

current url

~~~ruby
  class UsersController < ApplicationController
  def index
    url_for
    # http://0.0.0.0:3000/users
  end

  def new
    url_for
    # http://0.0.0.0:3000/users/new
  end
end
~~~

keywords: current path current_path current url


----------------------------------------------------


# RSpec described_class

you can rewrite...

~~~ruby
describe User do
  it "should do something with User class" do
    User.first.should be_present
  end
end
~~~

...with described_class...

~~~ruby
describe User do
  it "should do something with User class" do
    described_class.first.should be_present
  end
end
~~~

...this way you learn to write more flexible specs.










----------------------------------------------------




#loading gem from path 

in Gemfile you can load gems from github like 

    gem 'bootswatch-rails', git: "git://github.com/maxim/bootswatch-rails.git"

but you can also load from path

    gem 'my_gem', path: "/tmp/demo_gem/my_gem"

this is use-full when you are creating new gem, and you want to try it out in your app without  commiting









----------------------------------------------------


# current full url or full path in views and controllers

~~~ruby
    p request.fullpath
    "/foo/2/histories"

    p request.url
    "http://localhost:3000/foo/2/histories"
~~~

(REFERENCE)[http://stackoverflow.com/questions/2165665/how-to-get-current-url-in-rails]












----------------------------------------------------



# access view/helper methods in controller


~~~ruby
class UsersController < ApplicationController
  def destroy
    #...
    undo_link = view_context.link_to("undo", some_path)
    falsh[:notice] = "bla bla #{undo_link}"
    # ...
  end
end
~~~









----------------------------------------------------







# rails 3 partial render allias

~~~ruby
= render 'addresses/search_fields', :f=>f
# is same (and shorter) than
= render  partial: 'addresses/search_fields', locals: {:f=>f}
~~~










----------------------------------------------------


# passing block to partial

I was looking for something like this

~~~haml
# app/views/posts/show.html.haml
= render 'box_top_nav' do
  'something else'
~~~

~~~haml 
# app/views/posts/_box_top_nav.html.haml
%div 
  .something
    'something'
= yield
~~~


...pass block to partial and render it. Example above  won't work of course, but this will

~~~haml
# app/views/posts/show.html.haml
= render :layout => 'box_top_nav' do
  'something'
~~~



(reference1){http://stackoverflow.com/questions/2951105/rails-render-partial-with-block}






----------------------------------------------------

# jasmine confirmation/alert dialog stub

if you have javascript functionality with confirmation dialog over it (e.g. delete link with confirmation) and you want to test the result after user click positive option (OK) with Jasmine, you need to stub (spy on) confirmation dialog like this 

~~~js
#app/assets/javascript/dialogs.js.cofee

widgetClose = (e) ->
  if confirm("are you surre")
     #... do something
~~~


#spec/javascript/dialogs.js.coffee
describe 'click on remove button', ->
  it 'should do some stuff' , ->
    #spyOn(window,"alert")
    spyOn(window,"confirm").andReturn(true)  #stub confirm dialog and simulate click OK
    $('.box-btn').trigger('click')  #triger drop
    #...
~~~


----------------------------------------------------


# Mock Devise current_user in helper specs

~~~ruby

module WidgetHelper 
  def render_widgets_for_column
    # ....
    current_user.widget_preferences  #Devise gem current user
    #....
    return some_content
  end
end

describe WidgetHelper do

  describe 'render_widgets_for_column' do 
    it 'should .... ' do
      mocked_user = double('User', widget_preferences: {foo: bar} )
      helper.stub(:current_user){mocked_user}

      helper.render_widgets_for_column.should ....
    end
  end

end

~~~






----------------------------------------------------





# How to wrap every second elements of array into Haml (HTML) tag

~~~ruby
- a = ['one', 'two', 'three', 'four']
- a.each do |element|
  .my_row
    = element

# <div class="row">one</div>
# <div class="row">two</div>
# <div class="row">three</div>
# <div class="row">four</div>

- a = ['one', 'two', 'three', 'four']
- a.each_slice(2) do |row|
  .my_row
   - row.each do |element|
    = element

# <div class="row">onetwo</div>
# <div class="row">threefour</div>
~~~

reference: http://stackoverflow.com/questions/2851915/rails-each-loop-insert-tag-every-6-items




----------------------------------------------------



# HashWithIndifferentAccess

in Rails 

~~~ruby
h = Hash.new
h['aaa'] = 'hello'

p h['aaa']
# hello

p h[:aaa]
#nil



hwia = HashWithIndifferentAccess.new
hwia['aaa'] = 'hello'

p hwia['aaa']
# hello

p hwia[:aaa]
# hello
~~~

*params* in rails controllers are also  indifferent access hash 




----------------------------------------------------




# default_scope

did you know there is *default_scope* functionality in Rails?

~~~ruby
class Article
  default_scope order('published_at')
end
~~~


----------------------------------------------------



# Rails flash notice Haml

~~~ruby
- flash.each do |name, msg|
  %div{:class => "alert alert-#{name == :notice ? "success" : "error"}"}
    %a.close{"data-dismiss" => "alert"} ×
    = content_tag :div, msg, :id => "flash_#{name}" if msg.is_a?(String)
~~~








----------------------------------------------------






## split string to char array

~~~ruby
"Hello, world!".scan(/./)
# => ["H", "e", "l", "l", "o", ",", " ", "w", "o", "r", "l", "d", "!"]
~~~



## print random number in formated string

### with with 4 char format

like:

    "90  "
    "590 "

do 

~~~ruby
col = rand(9999)
print printf( "%-4s",col)
~~~

much cooler approach 


~~~ruby
"%4s" % rand(9999)
"%-4s" % rand(9999)
~~~


### with leading zeros 4 char format

~~~ruby
"%04d" % rand(9999)
~~~

    "0010"
    "0300"

## removing whitespaces from string

    s = " a x  e \n"
    s.strip
    #=> "a x  e"
    s.chomp
    #=> " a x  e "


## remove nonasci characters from string 

If you wan't to remove nonasci characters from string like 

    s = "Grüße"

solution:

    s.gsub!(/\P{ASCII}/, '')

or 

    s.delete!("^\u{0000}-\u{007F}")
    #=> Gre








----------------------------------------------------





## oweride instance method that is asigned to alredy existing method


content is  method dynamicly created from ActiveRecord on comment table of Comment instance (content is column in db of table comments)

    Comment.new(:content => "\naaa\r")

now I want to remove new line chars from the string. The fastest solution is like this: 

    class Comment
      def content
        raw_content = super
        raw_content.delete("\n\r")
      end
    end

now this isn't best practice solution. I should create new method like *dislpay_content*  and just call *content.delete* there but there are som temporary refactore situations where this works ok


## install gems to local application directory

    bundle install --path vendor/bundle

this will create local bundle copy with gems and evrything needed 

        ▾ bundle/                      
          ▾ ruby/                      
            ▾ 1.9.1/                   
              ▸ bin/                   
              ▸ bundler/               
              ▸ cache/                 
              ▸ doc/                   
              ▸ gems/                                                                                                                     
              ▸ specifications/        
                .DS_Store              
              .DS_Store                
            .DS_Store                  
        ▸ plugins/     


----------------------------------------------------
