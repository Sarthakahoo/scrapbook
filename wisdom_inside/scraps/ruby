



#ruby 1.9.2

notes from ryby 1.9.2 walktrough


## new labda syntax

lambda is object representation of block

~~~ruby
->x{x - 1}  
#same as 
lambda{|x| -  1}


lambda{|x,y,z| x + y + z - 1}
->(x,y,z}{x + y + z - 1}  

~~~

calling lambda

~~~ruby

a = ->{x + 1}.call(3)
#=> 4
a = ->{x + 1}.(3)
#=> 4
a = ->{x + 1}.[3]
#=> 4


a = ->{x + 1} === 3
#=> 4
#the last one can be used in case

a = lambda{|x| x == 'foo'}
case 'foo'
  when a
    p 'is fooo'
  else
    p 'not foo'
end
~~~

##encoding


[what charseti is what](http://dev.mysql.com/doc/refman/5.0/fr/charset-mysql.html)

~~~ruby
require 'iconv'
ic = Iconv.new('UTF-8', 'latin1')
valid_string = ic.iconv(untrusted_string + ' ')[0..-2]
~~~

[source](http://stackoverflow.com/questions/951891/how-can-i-convert-a-string-from-windows-1252-to-utf-8-in-ruby)



~~~ruby

__ENCODING__      # source encoding

Encoding.default_internal  #hwat enc is ruby working insde if nil its default and it means binary ascii
Encoding.default_external  #how ruby reeds external files
#more on these two at ruby inside video 1, 62:00

"abc".encoding.name 
# utf-8
~~~


###source encoding

when you put this on top of file it should tell ruby to use that encoding 

~~~
# encoding: utf-8

def foo
  
end
~~~

because  ruby 1.9.* is encoding based, you can use any symbolsuported in that encoding for method names ... this will not work in ruby 1.8.7 because it is ascii based

### opening file in differnt encoding

      r = File.open('aaa.txt','r:UTF-8')

if you want to use file in UTF-16 bu wor wit it utf-8 (reed one encoding but wor with that file in different)

      r = File.open('aaa.txt','r:UTF-16LE:UTF-8')


#hash


find wich key has value in hash

~~~ruby
hash.key(40)
# => :age
~~~


#Archive (older notes)


~~~ruby
>> (0..5).map
=> [0, 1, 2, 3, 4, 5]
>> (0...5).map
=> [0, 1, 2, 3, 4]



serialize      #convert hash to yamal


(0...5).map do(rating)
   # puts rating
end



{:a => 1, :b => 34, :c => 45} a ja z nej chci dostat {:a => 1, :c => 45}
hash.reject {|key, value| value == 34}





   a = [ 1, 2, [3, [4, 5] ] ]
   a.flatten   #=> [1, 2, 3, 4, 5]






a = ['oeu', 'di ', '  eou  ']
a.collect(&:strip)  
# 'oeu', 'di', 'eou' 




#random string 
#http://stackoverflow.com/questions/88311/how-best-to-generate-a-random-string-in-ruby
(0...50).map{ ('a'..'z').to_a[rand(26)] }.join








%w[ahoj ako\ sa\ mas  dovidenia]
# ["ahoj", "ako sa mas", "dovidevia"]

~~~
