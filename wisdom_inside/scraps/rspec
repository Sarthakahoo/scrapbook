http://cheat.errtheblog.com/s/rspec/

Model
======



~~~ruby
it "should throw exception" do
  lambda{User.something(data)}.should raise_error
end
~~~


~~~ruby
  it "must have a last name" do
    subject.should have(1).error_on(:last_name)
  end
~~~

##preventing callbacks

like after create 

look in scrap/model

##Json post##

~~~ruby

def json_post(action, body, params={})
    @request.env["HTTP_ACCEPT"] = "application/json"
    @request.env['RAW_POST_DATA'] = body
    response = post(action, params)
    @request.env.delete('RAW_POST_DATA')
    response
  end

  def set_http_header
    @request.env["Content-Type"] = "application/json"
    @request.env["Accept"] = "application/json"
    @request.env["Core-Api-Token"] = ::CORE_API_TOKEN
    @request.env["Application-Id"] =  ::APPLICATION_IDS[:iphone_application_version_1]
  end


  it "post to controller with json" do
     set_http_header
     json_post( :create, @user_data)
  end
~~~







~~~bash
bundle exec rspec spec
~~~

### kind of ###

https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/type-check-matchers

~~~ruby
something.should be_kind_of(Integer)
should be_kind_of(Fixnum) 

~~~


###stub!###

http://rspec.info/documentation/mocks/stubs.html

~~~ruby

Application.stub!(:local_repository_path).and_return('hello')

@application.stub!(:local_repository_path).and_return('hello')
p @application.local_repository_path
# hello 
~~~

to stub constant there is more sience, normaly in ruby you can do 

~~~ruby
Math.const_set("HIGH_SCHOOL_PI", 22.0/7.0)   #=> 3.14285714285714
Math::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968
~~~

but the constant musnt be defined, if is deffiend you have to do something like  

~~~ruby
old_local_repository_path = Application::LOCAL_REPOSITORIES_PATH
Application.send(:remove_const, "LOCAL_REPOSITORIES_PATH")
Application.const_set('LOCAL_REPOSITORIES_PATH',"#{old_local_repository_path}/RSPEC_TEST_FOLDER" )
~~~

http://digitaldumptruck.jotabout.com/?p=551 , http://stackoverflow.com/questions/339181/is-it-possible-to-undefine-a-variable-in-ruby


....














#Controller#

http://www.vaporbase.com/postings/Using_Rspec_on_Controllers



## Getting headers and body


###body

~~~ruby
    @controller.response.body
~~~

###header 

~~~ruby
    @controller.response.header
   #{"Expires"=>"Wed, 07 Dec 2011 16:22:32 GMT", "Content-Type"=>"text/html; charset=utf-8"}
~~~

@controller is allredy existing variable from rspec



## how to call show controller with stubbing functionality

~~~ruby
module Api::User 
  class SomeKindController < Api::User::BaseController 

  def show
    render :text => some_action
  end
     
  protected
     def somemethod
       33
     end
  end
end


#spec 

describe Api::User::SomeKindController do
 
   it "should get stubbed value 99" do
       controller.stub!(:somemethod).and_return(99)

       get :show, :id => 123
       controller.response.body.should be 99
   end

end

~~~

note:  *controller* is a rspec method that is acting as an instance of the controller you are calling. So you can access it directly


##stubing  request variable 


~~~ruby
it "should "do 
  request.stub!(:env).and_return({'HTTP_X_FORWARDED_FOR'=>'1.1.1.1, 2.2.2.2'})
  get :index
  ....
end


#in controller
 request_x_forwarded_for = request.env["HTTP_X_FORWARDED_FOR"]
~~~
















controller
=============


























scraps from peepcode 
====================

~~~ruby


Dir[Rails.root.join("spec/factories/**/*.rb")].each {|f| require f}


require 'spec_helper'
describe ModelName do
 uses_model ModelName #if different
 context "popis bla bla" do
    before(:each) do
      @joe = Factory(:existing_person)    
      @user = Factory.create(:user)
    end
  

	  it "should have 1 relationship" do
      1.times do
        @joe.create_relationship_with(Factory(:existing_person))
      end
      @joe.all_relationships.size.should == 1
    end
	
    it "should have 0 errors" do
      @joe.errors.count.should == 0
    end


    Recommendation.should respond_to(:taggable)


    model.some_model_method
 end  
end		




#testing if module is present
  include SomeModule #must be at top of the file

  it "should include TurnLikesToLove module" do
     model.included_modules.should include(TurnLikesToLove)
  end  

~~~


instalation and generation
==========================


rails 3
--------
        
bundler

        gem 'rspec-rails'

generator

        rails g rspec:install
        rails g rspec:scaffold ...

        

rails 2
---------------

installing : 

        [sudo] gem install rspec
        [sudo] gem install rspec-rails
        script/generate rspec 

generating

        script/generate rspec 
        script/generate rspec_scaffold semester name:string position:integer


