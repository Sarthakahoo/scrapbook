#shoulda 

http://cheat.errtheblog.com/s/rspec_shoulda/

~~~ruby
describe User do
  it{ should validate_presence_of :name}
  it{ should belong_to :client }

  describe 'uniqueness validations' do
    before {create :division}
    it{ should validate_uniqueness_of(:name).scoped_to(:client_id) }
  end
end
~~~






shared examples
-------------------

spec/support/shared_example.rb

~~~ruby
shared_examples_for "index action" do
  describe 'GET index' do
    before { get :index }

    it 'should be success' do
      response.should be_success
    end
  end
end
~~~

~~~ruby
describe ClientsController do
 it_behaves_like "index action"

  describe "get index" do
    #...something different, non shared
  end 
end

~~~




















expectation
implementation

http://cheat.errtheblog.com/s/rspec/


#any instance 

    # in controller spec 

    class UsersController
      def create
        @user = User.new(params[:user])
        @user.invite
      end
    end

    describe UsersController
      it 'creates a new user' do
        user_params = { 'email' => 'user@example.com', 'name' => 'name'}
        User.any_instance.should_receive(:invite).once.and_return(true)
        post :create, user: user_params
      end
    end


#factory attributes for

    user = FactoryGirl.build :user
    Factory.attributes_for :user
    {:name=>"User 2", :email=>"user2@example.com", :company=>"some company", :password=>"password123UUU", :password_confirmation=>"password123UUU"} 
    
    #in controller spec you can do 
    it 'redirects to the users index' do
      post :create, user: attributes_for(:user)
      response.should redirect_to( admin_users_path)
    end


# another factory exapmle

~~~ruby
FactoryGirl.define do
  factory(:user) do 
    sequence(:name) { |n| "User #{n}" } # User 1  User 2  User 3 ..
    sequence(:email) { |n| "user#{n}@example.com" }   
    company 'some company'
    password 'password123UUU'
    password_confirmation 'password123UUU'
  end
end
~~~


# rspec validate format of 

rspec validates_format_of

requires gem *shoulda*

    it { should validate_format_of(:password).not_with('aaaaaaaa').with_message(/include numbers, uppercase and lowercase letters/)}
    it { should validate_format_of(:password).with('aaaaaaA1').with_message(/include numbers, uppercase and lowercase letters/)}



#rspec have errors

target.should have(<number>).errors_on(:field)


http://rubydoc.info/github/thoughtbot/shoulda-matchers/master/frames



#rspec attr_accessible and attr_protected

http://stackoverflow.com/questions/9306392/how-to-test-attr-accessible-fields-in-rspec

in *spec/support/be_accessible_matcher.rb *

~~~ruby
RSpec::Matchers.define :be_accessible do |attribute|
  match do |response|
    response.send("#{attribute}=", :foo)
    response.send("#{attribute}").eql? :foo
  end
  description { "be accessible :#{attribute}" }
  failure_message_for_should { ":#{attribute} should be accessible" }
  failure_message_for_should_not { ":#{attribute} should not be accessible" }
end
~~~


      it { should_not be_accessible :field_name }
      it { should be_accessible :some_field }




#controller 


      describe PagesController 
        it 'should render correctly disabled account page' do
          get :account_disabled

          response.should be_success  #200
          response.should render_template('pages/account_disabled')
          #or
          response.should redirect_to admin_applications_path

        end
      end









#example for initialize method

~~~ruby
  describe 'initialization' do
    it "should raise error if na url to blog" do
      lambda{BlogParser::Base.new('htt://uplnakrepost')}.should raise_error('Should be link to github file')
      lambda{BlogParser::Base.new}.should raise_error(ArgumentError)
    end

    it "should set @url variable" do
      blog = BlogParser::Base.new('https://github.com/equivalent/scrapbook')
      blog.instance_variable_get('@url').should be_present
      blog.instance_variable_get('@url').should == 'https://github.com/equivalent/scrapbook'
    end
  end
~~~


# testing if initialization set instance variable

    class Rule
      def initialize(min) 
        @min_amount = min
      end
    end

rpsec

    it 'should set @min_amount to 10' do
      rule = Rule.new(10)
      rule.instance_variable_get('@min_amuont').should == 10
    end


# mocking and stubing job class

checking if method will call expected class / methods / instances 
the example below is for [resque](https://github.com/defunkt/resque) job 

~~~ruby
require "spec_helper"

*spec*

describe CreateNotificationForSomekindJob do  
  
  it_should_behave_like "a Resque job", described_class
  
  describe 'perform' do
    it "should call QueueJob.create_notification_for_somekind_job" do
      id = 1
      activity = double("activity", :title=> 'bubla')  #this is stub that takes other arguments
      
      ::SampleUser.should_receive(:find_by_id!).with(id).once.and_return(activity)
      QueueJob.should_receive(:create_notification_for_somekind_activity).with(activity).once
      
      described_class.perform(id)
    end
  end
end
~~~

*job*

~~~ruby
class CreateNotificationForSomekindJob < ResqueBase
  @queue = :notificatons

  def self.perform(sample_user_id)
    super
    sample_user = SampleUser.find_by_id! sample_user_id
    QueueJob.create_notification_for_somekind_activity(sample_user)
  end
end
~~~



[double method and other stubbing methods](http://rubydoc.info/gems/rspec-mocks/frames)



# should have association


~~~ruby
 it { should have_many :authorizations,  :class_name => "::Authorization::Base", :conditions => ::Authorization::Base::ValidAuthConditions }

~~~


# how to call private method in rspec #



~~~ruby
# app/model/something.rb

private
  def construct_lost_password_notification
     #...
  end

# spec/model/something.rb

@lost_password.construct_lost_password_notification
~~~

will end up with 

* private method `construct_lost_password_notification' called for #<LostPassword:0x007fc68f50ed50> *

solution 

~~~ruby
@lost_password.instance_eval{ construct_lost_password_notification }    
~~~



Model
======

~~~ruby
it "should throw exception" do
  lambda{User.something(data)}.should raise_error
end
~~~


~~~ruby
  it "must have a last name" do
    subject.should have(1).error_on(:last_name)
  end
~~~



##clearing database tables of loaded tables 

in *spec/spec_helper.rb*

~~~ruby
RSpec.configure do |config|

 config.before(:each) do
    clear_tables
 end

 config.after(:each) do
    clear_tables
 end

end

def clear_tables
  table_names = ActiveRecord::Base.connection.tables
  ::ActiveRecord::Base.subclasses.map{|subklass| subklass.delete_all } #if table_names.include?(subklass.table_name)}
end

~~~

^^ author G.R. (thx G.)



##preventing callbacks

like after create 

look in scrap/model

##Json post##

~~~ruby

def json_post(action, body, params={})
    @request.env["HTTP_ACCEPT"] = "application/json"
    @request.env['RAW_POST_DATA'] = body
    response = post(action, params)
    @request.env.delete('RAW_POST_DATA')
    response
  end

  def set_http_header
    @request.env["Content-Type"] = "application/json"
    @request.env["Accept"] = "application/json"
    @request.env["Core-Api-Token"] = ::CORE_API_TOKEN
    @request.env["Application-Id"] =  ::APPLICATION_IDS[:iphone_application_version_1]
  end


  it "post to controller with json" do
     set_http_header
     json_post( :create, @user_data)
  end
~~~







~~~bash
bundle exec rspec spec
~~~

### kind of ###

https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/type-check-matchers

~~~ruby
something.should be_kind_of(Integer)
should be_kind_of(Fixnum) 

~~~


###stub!###

http://rspec.info/documentation/mocks/stubs.html

~~~ruby

Application.stub!(:local_repository_path).and_return('hello')

@application.stub!(:local_repository_path).and_return('hello')
p @application.local_repository_path
# hello 
~~~

to stub constant there is more sience, normaly in ruby you can do 

~~~ruby
Math.const_set("HIGH_SCHOOL_PI", 22.0/7.0)   #=> 3.14285714285714
Math::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968
~~~

but the constant musnt be defined, if is deffiend you have to do something like  

~~~ruby
old_local_repository_path = Application::LOCAL_REPOSITORIES_PATH
Application.send(:remove_const, "LOCAL_REPOSITORIES_PATH")
Application.const_set('LOCAL_REPOSITORIES_PATH',"#{old_local_repository_path}/RSPEC_TEST_FOLDER" )
~~~

http://digitaldumptruck.jotabout.com/?p=551 , http://stackoverflow.com/questions/339181/is-it-possible-to-undefine-a-variable-in-ruby


....














#Controller#

http://www.vaporbase.com/postings/Using_Rspec_on_Controllers







##  how to test nested resources and custom match paths ##



~~~ruby
  resources "users", :only => [:show] do
    resources  "icecreams", :only => [:show]
    match "r/:id" => "icecreams#show"
  end
~~~


~~~ruby

describe IcecreamController do
  context "when show action triggered" do
    it "should render show page if valid icecream  guid provided " do
      get :show, {:id => @icecream.guid, :users_id => @user id}
      response.should be_successful
      response.should render_template("show")
    end


    it "should not render show page if valid or invalif notificatio guid provided " do
      lambda { get( :show, { :id => @other_objcet.guid, :user_id => 1322252355 }).should raise_error ActionController::RoutingError}

      lambda { get( :show, { :id => 'aaaaaa', :user_id => 123454324  }).should raise_error ActionController::RoutingError }

    end


    it "shorten form should work too" do
      { :get => "/users/33331/r/#{@icecream.guid}" }.should route_to(:controller => 'icecreams', :action => 'show', :id => @icecream.guid, :users_id => "33331" )
    end
  end
end
~~~

















## Getting headers and body


###body

~~~ruby
    @controller.response.body
~~~

###header 

~~~ruby
    @controller.response.header
   #{"Expires"=>"Wed, 07 Dec 2011 16:22:32 GMT", "Content-Type"=>"text/html; charset=utf-8"}
~~~

@controller is allredy existing variable from rspec



## how to call show controller with stubbing functionality

~~~ruby
module Api::User 
  class SomeKindController < Api::User::BaseController 

  def show
    render :text => some_action
  end
     
  protected
     def somemethod
       33
     end
  end
end


#spec 

describe Api::User::SomeKindController do
 
   it "should get stubbed value 99" do
       controller.stub!(:somemethod).and_return(99)

       get :show, :id => 123
       controller.response.body.should be 99
   end

end

~~~

note:  *controller* is a rspec method that is acting as an instance of the controller you are calling. So you can access it directly


##stubing  request variable 


~~~ruby
it "should "do 
  request.stub!(:env).and_return({'HTTP_X_FORWARDED_FOR'=>'1.1.1.1, 2.2.2.2'})
  get :index
  ....
end


#in controller
 request_x_forwarded_for = request.env["HTTP_X_FORWARDED_FOR"]
~~~
















controller
=============


























scraps from peepcode 
====================

~~~ruby


Dir[Rails.root.join("spec/factories/**/*.rb")].each {|f| require f}


require 'spec_helper'
describe ModelName do
 uses_model ModelName #if different
 context "popis bla bla" do
    before(:each) do
      @joe = Factory(:existing_person)    
      @user = Factory.create(:user)
    end
  

	  it "should have 1 relationship" do
      1.times do
        @joe.create_relationship_with(Factory(:existing_person))
      end
      @joe.all_relationships.size.should == 1
    end
	
    it "should have 0 errors" do
      @joe.errors.count.should == 0
    end


    Recommendation.should respond_to(:taggable)


    model.some_model_method
 end  
end		




#testing if module is present
  include SomeModule #must be at top of the file

  it "should include TurnLikesToLove module" do
     model.included_modules.should include(TurnLikesToLove)
  end  

~~~


instalation and generation
==========================


rails 3
--------
        
bundler

        gem 'rspec-rails'

generator

        rails g rspec:install
        rails g rspec:scaffold ...

        

rails 2
---------------

installing : 

        [sudo] gem install rspec
        [sudo] gem install rspec-rails
        script/generate rspec 

generating

        script/generate rspec 
        script/generate rspec_scaffold semester name:string position:integer


