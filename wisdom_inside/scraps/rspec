
~~~bash
bundle exec rspec spec
~~~

### kind of ###

https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/type-check-matchers

~~~ruby
something.should be_kind_of(Integer)
should be_kind_of(Fixnum) 

~~~


###stub!###

~~~ruby

Application.stub!(:local_repository_path).and_return('hello')

@application.stub!(:local_repository_path).and_return('hello')
p @application.local_repository_path
# hello 
~~~

to stub constant there is more sience, normaly in ruby you can do 

~~~ruby
Math.const_set("HIGH_SCHOOL_PI", 22.0/7.0)   #=> 3.14285714285714
Math::HIGH_SCHOOL_PI - Math::PI              #=> 0.00126448926734968
~~~

but the constant musnt be defined, if is deffiend you have to do something like  

~~~ruby
old_local_repository_path = Application::LOCAL_REPOSITORIES_PATH
Application.send(:remove_const, "LOCAL_REPOSITORIES_PATH")
Application.const_set('LOCAL_REPOSITORIES_PATH',"#{old_local_repository_path}/RSPEC_TEST_FOLDER" )
~~~

http://digitaldumptruck.jotabout.com/?p=551 , http://stackoverflow.com/questions/339181/is-it-possible-to-undefine-a-variable-in-ruby



scraps from peepcode 
====================

~~~ruby


Dir[Rails.root.join("spec/factories/**/*.rb")].each {|f| require f}


require 'spec_helper'
describe ModelName do
 uses_model ModelName #if different
 context "popis bla bla" do
    before(:each) do
      @joe = Factory(:existing_person)    
      @user = Factory.create(:user)
    end
  

	  it "should have 1 relationship" do
      1.times do
        @joe.create_relationship_with(Factory(:existing_person))
      end
      @joe.all_relationships.size.should == 1
    end
	
    it "should have 0 errors" do
      @joe.errors.count.should == 0
    end


    Recommendation.should respond_to(:taggable)


    model.some_model_method
 end  
end		




#testing if module is present
  include SomeModule #must be at top of the file

  it "should include TurnLikesToLove module" do
     model.included_modules.should include(TurnLikesToLove)
  end  

~~~


instalation and generation
==========================


rails 3
--------
        
bundler

        gem 'rspec-rails'

generator

        rails g rspec:install
        rails g rspec:scaffold ...

        

rails 2
---------------

installing : 

        [sudo] gem install rspec
        [sudo] gem install rspec-rails
        script/generate rspec 

generating

        script/generate rspec 
        script/generate rspec_scaffold semester name:string position:integer


