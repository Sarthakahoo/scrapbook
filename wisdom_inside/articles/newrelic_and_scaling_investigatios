
investigations done on 3rd of October 2011 on newrelic scaling options and functionality

there are several screencasts on newrelic provided directly by NewRelic  
[new relict screencasts on scaling](http://railslab.newrelic.com/scaling-rails)

http://railslab.newrelic.com/2009/01/22/new-relic-rpm
http://railslab.newrelic.com/2009/02/05/episode-5-advanced-page-caching

What is new relic 
=================

[short video explaining what is new relic](http://newrelic.com/why-new-relic/how-it-works)

is a one place monitoring tool (scaling) for many languages (ruby java php python ...) suported for many providers (heroku ...) unlike [monit](http://mmonit.com/monit/) when som process dies (like delayed job), new relic wont start it automaticly but just sends an notification (this may be wrong, maybe gold program provides such a feature, but I didn' came accross it)

several possible programs 
-------------------------

[video for free and bronze](http://railslab.newrelic.com/2009/02/05/episode-5-advanced-page-caching)

*  free program
  *  **overview** average time on cpu, troughput calls per mintute
  *  **controller** which controllers are taking how much time on average
  
*  bronze
  *  compare from yesterday
  *  monitoring each host separately 
  *  page volumae - most popular controller actions, how many times was action triggered
  *  time consuption  - slowest controllers, witch controller is taking most time
  *  cluster breakout - for each host you can see 
     *    application throughput for each posts on average   
     *  application response time
     *  mongrel queue line
     *  cpu for each host
  *  compare to yesterday (throughput cpu .. ) 
  *  

 [video for silver gold](http://railslab.newrelic.com/2009/03/05/episode-13-jim-gochee-advanced-rpm)

*  silver
    *  transaction traces 
       *   additional functionality to free controller trace, where you can see actual *transaction traces* =  actual samples of transactions that went through server
           *   which server it came from
           *   when 
           *   how long it took to proces
           *   parameter trace
       *  tracing methods (how long took each Object.call to do it functionality)
           *    f.e.  15ms on Order.find 
           *    you can see SQL query for each of them 
           *    if any SQL took certain amount time there is possibility to see why it took so much ( f.e. it will explain that it was using temporary table)
    *   error tracing 
        *   error log with count ( something like hoptoad )
        *   possibility to see piece of source code that triggers error 
        *   there is possibility of notification of sudden error count increase or if suddenly cpu went up or similar unusual behavior 
        *   incidents (tickets) are closing automatically when they drop on certain number of "errors per minute" or similar
    *   compare with yesterday

*  gold
    *  response time  vs throughput 
        *  you want even response time vs throughput, this tool helps you with that 
    *  action of model monitoring  =  tool that will show you which actions of models are slowing / speeding up over days 






